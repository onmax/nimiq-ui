name: Deploy

on:
  # Run on pushes but ignore commits from our workflow
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  pages: write
  id-token: write

# Cancel in-progress runs when new changes are pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    environment: Dev
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: pnpm

      - name: Install dependencies
        run: pnpm install

      - name: Build all assets
        run: pnpm run build
        env:
          FIGMA_FILE_ID: ${{ secrets.FIGMA_FILE_ID }}
          FIGMA_API_TOKEN: ${{ secrets.FIGMA_API_TOKEN }}

      - name: Upload docs artifact for GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs/.vitepress/dist

      - name: Upload packages artifact
        uses: actions/upload-artifact@v4
        with:
          name: packages-dist
          path: packages/**/dist

  deploy_docs:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  deploy_pkg:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: pnpm

      - name: Download packages artifact
        uses: actions/download-artifact@v4
        with:
          name: packages-dist
          path: downloaded-dist

      - name: Replace package dist folders
        run: |
          # Create directories if they don't exist
          mkdir -p packages
          
          # Find all directories in the downloaded artifact
          for pkg_dir in downloaded-dist/*/; do
            if [ -d "$pkg_dir" ]; then
              # Extract package name from path
              pkg_name=$(basename "$pkg_dir")
              
              # Ensure the package directory exists
              mkdir -p "packages/$pkg_name"
              
              # Replace the dist directory
              rm -rf "packages/$pkg_name/dist"
              mv "$pkg_dir" "packages/$pkg_name/dist"
            fi
          done
          
          # Clean up the downloaded directory
          rm -rf downloaded-dist

      - name: Publish packages
        run: pnpm dlx pkg-pr-new publish --pnpm './packages/*'
