pre {
  padding-right: 0;
  padding-left: 0;

  code {
    padding: 0 1.5rem;
    width: fit-content;
    min-width: 100%;
    position: relative;
    display: inline-block;
    border-radius: 0;

    .highlighted,
    .diff {
      transition: background-color 0.5s;
      margin: 0 -1.5rem;
      padding: 0 1.5rem;
      width: calc(100% + 3rem);
      display: inline-block;
      border-top-width: 1px;
      border-bottom-width: 1px;
      background-color: var(--bg-color);
      border-color: var(--border-color);
    }

    .highlighted {
      --bg-color: rgb(var(--nq-neutral-200));
      --border-color: rgb(var(--nq-neutral-300));
    }

    .highlighted:has(+ .highlighted) {
      border-bottom-width: 0;
      position: relative;
      bottom: -1px;
    }

    .highlighted + .highlighted {
      border-top-width: 0;
    }

    .diff.remove {
      --bg-color: rgb(var(--nq-red-400));
      --border-color: rgb(var(--nq-red-500));
    }

    .diff.add {
      --bg-color: rgb(var(--nq-green-400));
      --border-color: rgb(var(--nq-green-500));
    }

    .diff:has(+ .diff) {
      border-bottom-width: 0;
      position: relative;
      bottom: -1px;
    }

    .diff + .diff {
      border-top-width: 0;
    }
  }
}

:not(.vp-code-group > .blocks) > .language- {
  position: relative;

  .copy {
    top: 18px;
  }

  pre {
    padding-top: 1rem;
  }
}

:where(:not(.vp-code-group > .blocks) > div[class^='language-']:not(.language-), .vp-code-group) {
  margin-top: 1.5em;
  outline: 1.5px solid rgb(var(--nq-neutral) / 0.08);
  border-radius: 0.5em;
  position: relative;

  .lang,
  .tabs {
    height: 44px;
    --nq-m-min: 20;
    --nq-m-max: 24;
    padding: 8px var(--nq-m-size);
    background-color: rgb(var(--nq-neutral-50));
    border-radius: 0.5rem 0.5rem 0 0;
    border-bottom: 1.5px solid rgb(var(--nq-neutral) / 0.08);

    display: flex;
    justify-content: flex-start;
  }

  pre {
    border-top-left-radius: 0;
    border-top-right-radius: 0;
    margin-top: 0;
    outline: none;
  }
}

:where(:not(.vp-code-group > .blocks) > div[class^='language-'], .vp-code-group > .blocks > .active) .copy {
  position: absolute;
  top: 8px;
  right: 20px;
  height: 28px;
  width: 28px;
  display: flex;
  align-items: center;
  justify-content: center;
  background-color: transparent;
  transition: background-color 0.2s var(--nq-ease);
  background-color: rgb(var(--nq-neutral-50));
  z-index: 1;
  font-size: 14px;
  border-radius: 6px;
  color: rgba(var(--nq-neutral-800));

  &.copied {
    cursor: default;

    &::before {
      --icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 12 10'%3E%3Cg clip-path='url(%23a)'%3E%3Cpath stroke='currentColor' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='M11.082 1.111 5.022 8.89 1.363 5.687'/%3E%3C/g%3E%3Cdefs%3E%3CclipPath id='a'%3E%3Cpath fill='white' d='M0 0h12v10H0z'/%3E%3C/clipPath%3E%3C/defs%3E%3C/svg%3E%0A");
      color: rgba(var(--nq-green));
    }
  }

  &:not(.copied) {
    &:hover,
    &:focus-visible {
      background-color: rgba(var(--nq-neutral-200));
    }

    &::before {
      --icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 15 15'%3E%3Cpath stroke='%231F2348' stroke-width='1.5' d='M9.861 3.7V2a1 1 0 0 0-1-1H2.377a1 1 0 0 0-1 1v7.256a1 1 0 0 0 1 1h1.314m2.542 3.083h6.484a1 1 0 0 0 1-1V5.86a1 1 0 0 0-1-1H6.233a1 1 0 0 0-1 1v6.48a1 1 0 0 0 1 1Z'/%3E%3C/svg%3E%0A");
    }
  }

  &:before {
    content: '';
    position: relative;
    display: inline-block;
    -webkit-mask: var(--icon) no-repeat;
    mask: var(--icon) no-repeat;
    -webkit-mask-size: 100% 100%;
    mask-size: 100% 100%;
    background-color: currentColor;
    color: inherit;
    top: 0;
    right: 0;
    bottom: 0;
    left: -1px;
    z-index: inherit;
    margin-left: 0.4em;
    width: 1em;
    height: 1em;
  }
}

:where(:not(.vp-code-group > .blocks) div[class^='language-']:not(.language-) .lang, .vp-code-group .tabs label) {
  padding: 0.25em 0.65em 0.25em 0.75em;
  font-size: 14px;
  color: rgb(var(--nq-neutral-700));
  font-weight: 600;
  display: flex;
  align-items: center;
  justify-content: flex-start;
  margin-left: 0.5rem;
  gap: 8px;

  /* Default file icon */
  --logo: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 22 28"><path stroke="%231f2348" stroke-linecap="round" stroke-linejoin="round" stroke-width="2.667" d="M14 2v5.333a1.334 1.334 0 0 0 1.333 1.334h5.334"/><path stroke="%231f2348" stroke-linecap="round" stroke-linejoin="round" stroke-width="2.667" d="M18 26H4.667A2.667 2.667 0 0 1 2 23.333V4.667A2.667 2.667 0 0 1 4.667 2H14l6.667 6.667v14.666A2.667 2.667 0 0 1 18 26Z"/></svg>');

  .dark & {
    --logo: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 22 28"><path stroke="%23ffffffaa" stroke-linecap="round" stroke-linejoin="round" stroke-width="2.667" d="M14 2v5.333a1.334 1.334 0 0 0 1.333 1.334h5.334"/><path stroke="ffffffaa" stroke-linecap="round" stroke-linejoin="round" stroke-width="2.667" d="M18 26H4.667A2.667 2.667 0 0 1 2 23.333V4.667A2.667 2.667 0 0 1 4.667 2H14l6.667 6.667v14.666A2.667 2.667 0 0 1 18 26Z"/></svg>');
  }

  &::before {
    content: '';
    position: relative;
    display: inline-block;
    background: var(--logo) no-repeat;
    background-size: 100% 100%;
    background-color: transparent;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    z-index: inherit;
    width: 1em;
    height: 1em;
  }
}

.vp-code-group {
  /* We only apply the active styles if there are more than one tab */
  .tabs:has(> input + label + input) {
    /* Set monochromatic style for unchecked labels */
    input:not(:checked) + label::before {
      opacity: 0.6;
      filter: grayscale(100%);
      transition:
        opacity 0.2s var(--nq-ease),
        filter 0.2s var(--nq-ease);
    }

    input:checked + label {
      background-color: rgb(var(--nq-blue-400));
      color: rgb(var(--nq-blue));
    }

    label {
      border-radius: 6px;
      margin-right: 0.5em;
      cursor: pointer;
      transition:
        background-color 0.2s,
        color 0.2s;
      color: rgb(var(--nq-neutral-700));

      &:hover {
        background-color: rgb(var(--nq-neutral-200));
        color: rgb(var(--nq-neutral-800));
      }

      input:focus-visible + & {
        background-color: rgb(var(--nq-blue-400));
        color: rgb(var(--nq-blue));
      }
    }
  }

  .tabs:not(:has(> input + label + input)) {
    label {
      color: rgb(var(--nq-neutral-800));
      transform: translateX(-0.75em);
    }
  }

  .tabs {
    input {
      width: 1px;
      height: 1px;
      padding: 0;
      margin: -1px;
      overflow: hidden;
      clip: rect(0, 0, 0, 0);
      white-space: nowrap;
      border-width: 0;
    }
  }

  .blocks {
    > div:not(.active) {
      display: none;
    }

    .lang {
      display: none;
    }
  }

  /* ComponentPreview spacing */
  .nq-raw[class*='f-my-lg'] {
    .nq-raw > div {
      padding-top: 1rem;
    }
  }

  /* Alternative targeting for ComponentPreview */
  [data-radix-tabs-content] {
    padding-top: 1rem;
  }

  /* Target ComponentPreview content areas */
  .nq-raw .grow {
    padding-top: 1rem;
  }

  /* Direct targeting for ComponentPreview tabs content */
  .nq-raw [role='tabpanel'] {
    padding-top: 1rem;
  }

  /* Specific targeting for ComponentPreview preview content */
  .nq-raw [role='tabpanel'][data-state='active'] {
    padding-top: 1rem;
  }

  /* Target the preview content area specifically */
  .nq-raw [data-radix-tabs-content][data-state='active'] {
    padding-top: 1rem;
  }

  /* More specific targeting for ComponentPreview content */
  .nq-raw > div > div {
    padding-top: 1rem;
  }

  /* Direct targeting for TabsContent */
  .nq-raw [data-radix-tabs-content] {
    padding-top: 1rem !important;
  }
}
